# -*- coding: utf-8 -*-
"""parse-calphad-phase-data-parser-and-merge-into-dedup-csv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wKgaKfPTgE-1hKt2OizJmqeAYbsFWYZU
"""

import os
import re
import pandas as pd

# ------------------------------------------------------------------------------
# 1) Regex for phases (e.g. BCC_A2, FCC_A1#1, FCC_A1_AUTO#2, etc.)
# ------------------------------------------------------------------------------
phase_pattern = re.compile(
    r'^([A-Z]+(?:_[A-Z0-9]+)*(?:#[0-9]+)?)(?=\s|\.|$)',
    re.IGNORECASE
)

# ------------------------------------------------------------------------------
# 2) Regex for GM(FCC_A1#N) or HM(FCC_A1#N):
#    We capture two groups:
#      group(1) = the full label, e.g. "GM(FCC_A1#1)" or "HM(FCC_A1)"
#      group(2) = the numeric value, e.g. "-1.0021320E+04"
# ------------------------------------------------------------------------------
gm_pattern = re.compile(
    r'(gm\(fcc_a1(?:#[0-9]+)?\))\s*=\s*([\-\+]?\d+(?:\.\d+)?(?:[eE][\-\+]?\d+)?)',
    re.IGNORECASE
)

hm_pattern = re.compile(
    r'(hm\(fcc_a1(?:#[0-9]+)?\))\s*=\s*([\-\+]?\d+(?:\.\d+)?(?:[eE][\-\+]?\d+)?)',
    re.IGNORECASE
)

def parse_phases_and_calcs(filepath):
    """
    Parses a text file to extract:
      1) Phase "Form.Units" values between 'Some data for phases' and '--->OC6:'.
      2) GM(FCC_A1[#N]) and HM(FCC_A1[#N]) values anywhere in the file.

    Returns a dictionary with:
      {
        "phases": { <phase_name>: <float_form_units>, ... },
        "calcs": { <calc_label>: <float_value>, ... }
      }
    e.g.
      {
        "phases": { "BCC_A2": 0.397, "FCC_A1#1": 0.329 },
        "calcs": {
           "GM(FCC_A1)": -10021.32,
           "HM(FCC_A1#1)": 632.81868
        }
      }
    """
    results = {
        "phases": {},
        "calcs": {}
    }
    capture = False  # Controls capturing between "Some data for phases" and "--->OC6:"

    with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
        for line in f:
            line_lower = line.lower()

            # ------------------------------------------------------
            # Turn capturing on after we see "some data for phases"
            # ------------------------------------------------------
            if not capture:
                if "some data for phases" in line_lower:
                    capture = True
                    # IMPORTANT: skip parsing this same line as a phase
                    continue
            else:
                # If we see the end marker, stop capturing
                if "--->oc6:" in line_lower:
                    capture = False
                    continue

            # ------------------------------------------------------
            # 1) Check for GM(...) or HM(...) lines anywhere in file
            #    (If you ONLY want them in the same block, move these
            #     checks inside `if capture:`.)
            # ------------------------------------------------------
            match_gm = gm_pattern.search(line)
            if match_gm:
                label_gm = match_gm.group(1)  # e.g. "GM(FCC_A1#1)"
                gm_value_str = match_gm.group(2)
                try:
                    gm_val = float(gm_value_str)
                except ValueError:
                    gm_val = None
                results["calcs"][label_gm] = gm_val

            match_hm = hm_pattern.search(line)
            if match_hm:
                label_hm = match_hm.group(1)  # e.g. "HM(FCC_A1#1)"
                hm_value_str = match_hm.group(2)
                try:
                    hm_val = float(hm_value_str)
                except ValueError:
                    hm_val = None
                results["calcs"][label_hm] = hm_val

            # ------------------------------------------------------
            # 2) Parse phases if we're capturing
            # ------------------------------------------------------
            if capture:
                # Skip the known header line ("Name Status Mass Volume Form.Units ...")
                if ("name" in line_lower and "status" in line_lower
                    and "mass" in line_lower and "volume" in line_lower
                    and "form.units" in line_lower):
                    continue

                # Remove trailing dots
                line_clean = line.rstrip()
                line_clean = re.sub(r'\.+$', '', line_clean)

                # Attempt to match a phase name at the start
                match_phase = phase_pattern.match(line_clean)
                if match_phase:
                    phase_name = match_phase.group(1)  # e.g. "BCC_A2" or "FCC_A1#1"

                    # Typically the 5th column (index 4) is Form.Units
                    parts = line.split()
                    if len(parts) >= 5:
                        form_units_str = parts[4]
                        try:
                            form_units_val = float(form_units_str)
                        except ValueError:
                            form_units_val = None
                        results["phases"][phase_name] = form_units_val

    return results


def main():
    # ------------------------------------------------------------------------------
    # 3) Read the CSV
    # ------------------------------------------------------------------------------
    #csv_file = 'df_298_longer(w_entropy)-DEDUP-w-count-jaie-wang-data.csv'
    csv_file = 'OpenCalphad-train-conditional-test-12-alcrcofeni-4k-rows-DEDUP.csv'
    df = pd.read_csv(csv_file)

    txt_folder = "./results"  # folder with "new 1.txt", "new 2.txt", etc.

    for i in range(len(df)):
        text_filename = os.path.join(txt_folder, f"row-{i+1}-results.txt")
        if not os.path.exists(text_filename):
            print(f"Warning: File '{text_filename}' not found. Skipping row {i+1}.")
            continue

        # Parse the file to extract phases + GM(HM) calculations
        parse_results = parse_phases_and_calcs(text_filename)

        # Extract the dictionary of phases
        phases_found = parse_results["phases"]
        # Extract the dictionary of calcs (GM(FCC_A1), HM(FCC_A1))
        calcs_found = parse_results["calcs"]

        # ------------------------------------------------------------------------------
        # 4) For each found phase, add a column if it doesn't exist, then set the value
        # ------------------------------------------------------------------------------
        for phase_name, form_units_value in phases_found.items():
            if phase_name not in df.columns:
                df[phase_name] = float('nan')
            df.at[i, phase_name] = form_units_value

        # ------------------------------------------------------------------------------
        # 5) For GM(FCC_A1), HM(FCC_A1), also create columns if needed
        # ------------------------------------------------------------------------------
        for calc_name, calc_value in calcs_found.items():
            if calc_name not in df.columns:
                df[calc_name] = float('nan')
            df.at[i, calc_name] = calc_value

    # ------------------------------------------------------------------------------
    # 6) Write the updated DataFrame to a new CSV
    # ------------------------------------------------------------------------------
    output_csv = 'data_with_phases_and_calcs.csv'
    df.to_csv(output_csv, index=False)
    print(f"Updated CSV written to {output_csv}")


if __name__ == "__main__":
    main()