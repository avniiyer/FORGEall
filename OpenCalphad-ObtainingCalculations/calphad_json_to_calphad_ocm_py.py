# -*- coding: utf-8 -*-
"""calphad-json-to-calphad-ocm.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FBLTNKVd-G_7DR3HgzzlkZJYXaFsKsYW
"""

import os
import json
from decimal import Decimal

def generate_ocm_files(json_folder, template_path, output_folder):
    # Load template content
    with open(template_path, 'r') as file:
        template = file.read()

    # Iterate over all JSON files in the folder
    for json_file in os.listdir(json_folder):
        if json_file.endswith('.json'):
            json_path = os.path.join(json_folder, json_file)

            # Load JSON data
            with open(json_path, 'r') as jf:
                data = json.load(jf)

            # Extract composition elements and values
            composition = data.get('Composition', {})
            elements = [el.upper() for el in composition.keys()]

            # Create set conditions and find the largest value
            set_conditions = [
                (f"set condition w({el.upper()}) = {Decimal(comp_data['Comp'] / 100).quantize(Decimal('0.0000'))}", comp_data['Comp'] / 100)
                for el, comp_data in composition.items()
            ]

            # Find and remove the condition with the largest value
            largest_value = max(set_conditions, key=lambda x: x[1])
            set_conditions.remove(largest_value)

            # Extract only the condition strings
            set_conditions = [condition[0] for condition in set_conditions]

            # Replace placeholders in template
            modified_content = template
            modified_content = modified_content.replace(
                #"CO CR MN NI FE", " ".join(elements)     #jaewin-wang data
                "AL V CR MN FE CO NI CU MO", " ".join(elements)     #alcrcofeni data
            )
            # Replace entire set condition block
            set_block_start = modified_content.find("set condition w(CO)")  # Start of set block
            set_block_end = modified_content.find(";", set_block_start) + 1  # End of block
            modified_content = (
                modified_content[:set_block_start]
                + "\n".join(set_conditions)
                + modified_content[set_block_end:]
            )

            # Save the modified .ocm file
            output_filename = os.path.splitext(json_file)[0] + ".ocm"
            output_path = os.path.join(output_folder, output_filename)
            with open(output_path, 'w') as outfile:
                outfile.write(modified_content)

# Define paths
json_folder = "./json"
template_path = "./master-template-alcrcofeni.ocm"
output_folder = "./ocm"

# Ensure output folder exists
os.makedirs(output_folder, exist_ok=True)

# Generate .ocm files
generate_ocm_files(json_folder, template_path, output_folder)